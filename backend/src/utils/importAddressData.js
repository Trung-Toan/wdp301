const Province = require("../model/address/Province");
const Ward = require("../model/address/Ward");

/**
 * Import d·ªØ li·ªáu ƒë·ªãa ch·ªâ t·ª´ JSON structure nh∆∞ trong ·∫£nh
 * @param {Array} jsonData - M·∫£ng ch·ª©a d·ªØ li·ªáu t·ªânh/th√†nh ph·ªë v√† ph∆∞·ªùng/x√£
 */
const importAddressData = async (jsonData) => {
    try {
        console.log("üöÄ B·∫Øt ƒë·∫ßu import d·ªØ li·ªáu ƒë·ªãa ch·ªâ...");

        let totalProvinces = 0;
        let totalWards = 0;

        for (const provinceData of jsonData) {
            // T·∫°o Province
            const province = await Province.create({
                code: provinceData.Code,
                fullName: provinceData.FullName,
                shortName: extractShortName(provinceData.FullName),
                type: provinceData.FullName.includes("Th√†nh ph·ªë") ? "Th√†nh ph·ªë" : "T·ªânh",
                region: getRegionByProvince(provinceData.Code)
            });

            totalProvinces++;
            console.log(`‚úÖ ƒê√£ t·∫°o t·ªânh: ${province.fullName}`);

            // T·∫°o c√°c Ward
            if (provinceData.Wards && Array.isArray(provinceData.Wards)) {
                for (const wardData of provinceData.Wards) {
                    await Ward.create({
                        code: wardData.Code,
                        fullName: wardData.FullName,
                        shortName: extractShortName(wardData.FullName),
                        type: getWardType(wardData.FullName),
                        provinceCode: wardData.ProvinceCode
                    });

                    totalWards++;
                }
                console.log(`‚úÖ ƒê√£ t·∫°o ${provinceData.Wards.length} ph∆∞·ªùng/x√£ cho ${province.fullName}`);
            }
        }

        console.log(`üéâ Ho√†n th√†nh import: ${totalProvinces} t·ªânh/th√†nh ph·ªë, ${totalWards} ph∆∞·ªùng/x√£`);

    } catch (error) {
        console.error("‚ùå L·ªói khi import d·ªØ li·ªáu ƒë·ªãa ch·ªâ:", error);
        throw error;
    }
};

/**
 * Tr√≠ch xu·∫•t t√™n ng·∫Øn t·ª´ t√™n ƒë·∫ßy ƒë·ªß
 * @param {string} fullName - T√™n ƒë·∫ßy ƒë·ªß
 * @returns {string} - T√™n ng·∫Øn
 */
const extractShortName = (fullName) => {
    if (!fullName) return "";

    // Lo·∫°i b·ªè c√°c t·ª´ nh∆∞ "Th√†nh ph·ªë", "T·ªânh", "Ph∆∞·ªùng", "X√£", "Th·ªã tr·∫•n"
    const prefixes = ["Th√†nh ph·ªë", "T·ªânh", "Ph∆∞·ªùng", "X√£", "Th·ªã tr·∫•n"];

    let shortName = fullName;
    for (const prefix of prefixes) {
        if (shortName.startsWith(prefix)) {
            shortName = shortName.substring(prefix.length).trim();
            break;
        }
    }

    return shortName;
};

/**
 * X√°c ƒë·ªãnh lo·∫°i ph∆∞·ªùng/x√£ t·ª´ t√™n ƒë·∫ßy ƒë·ªß
 * @param {string} fullName - T√™n ƒë·∫ßy ƒë·ªß
 * @returns {string} - Lo·∫°i ph∆∞·ªùng/x√£
 */
const getWardType = (fullName) => {
    if (fullName.includes("Ph∆∞·ªùng")) return "Ph∆∞·ªùng";
    if (fullName.includes("X√£")) return "X√£";
    if (fullName.includes("Th·ªã tr·∫•n")) return "Th·ªã tr·∫•n";
    return "Ph∆∞·ªùng"; // Default
};

/**
 * X√°c ƒë·ªãnh v√πng mi·ªÅn d·ª±a tr√™n m√£ t·ªânh
 * @param {string} provinceCode - M√£ t·ªânh
 * @returns {string} - V√πng mi·ªÅn
 */
const getRegionByProvince = (provinceCode) => {
    const code = parseInt(provinceCode);

    // Mi·ªÅn B·∫Øc: 01-30
    if (code >= 1 && code <= 30) return "Mi·ªÅn B·∫Øc";

    // Mi·ªÅn Trung: 31-60
    if (code >= 31 && code <= 60) return "Mi·ªÅn Trung";

    // Mi·ªÅn Nam: 61-96
    if (code >= 61 && code <= 96) return "Mi·ªÅn Nam";

    return "Mi·ªÅn B·∫Øc"; // Default
};

/**
 * T√¨m ki·∫øm ƒë·ªãa ch·ªâ theo t·ª´ kh√≥a
 * @param {string} keyword - T·ª´ kh√≥a t√¨m ki·∫øm
 * @returns {Object} - K·∫øt qu·∫£ t√¨m ki·∫øm
 */
const searchAddress = async (keyword) => {
    try {
        const provinces = await Province.find({
            $or: [
                { fullName: { $regex: keyword, $options: "i" } },
                { shortName: { $regex: keyword, $options: "i" } }
            ]
        }).limit(10);

        const wards = await Ward.find({
            $or: [
                { fullName: { $regex: keyword, $options: "i" } },
                { shortName: { $regex: keyword, $options: "i" } }
            ]
        }).populate('provinceCode', 'fullName').limit(20);

        return {
            provinces,
            wards,
            total: provinces.length + wards.length
        };
    } catch (error) {
        console.error("‚ùå L·ªói khi t√¨m ki·∫øm ƒë·ªãa ch·ªâ:", error);
        throw error;
    }
};

module.exports = {
    importAddressData,
    searchAddress,
    extractShortName,
    getWardType,
    getRegionByProvince
};


