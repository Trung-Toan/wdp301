const { Province, Ward, AddressDetail } = require("../model/address");
const Clinic = require("../model/clinic/Clinic");

/**
 * Script test ƒë·ªÉ ki·ªÉm tra c√°c model ƒë·ªãa ch·ªâ m·ªõi
 */
const testAddressModels = async () => {
    try {
        console.log("üß™ B·∫Øt ƒë·∫ßu test c√°c model ƒë·ªãa ch·ªâ...");

        // Test 1: T·∫°o Province
        console.log("\n1Ô∏è‚É£ Test t·∫°o Province...");
        const province = new Province({
            code: "01",
            fullName: "Th√†nh ph·ªë H√† N·ªôi",
            shortName: "H√† N·ªôi",
            type: "Th√†nh ph·ªë",
            region: "Mi·ªÅn B·∫Øc"
        });

        await province.save();
        console.log("‚úÖ Province ƒë√£ ƒë∆∞·ª£c t·∫°o:", province.fullName);

        // Test 2: T·∫°o Ward
        console.log("\n2Ô∏è‚É£ Test t·∫°o Ward...");
        const ward = new Ward({
            code: "00004",
            fullName: "Ph∆∞·ªùng Ba ƒê√¨nh",
            shortName: "Ba ƒê√¨nh",
            type: "Ph∆∞·ªùng",
            provinceCode: "01"
        });

        await ward.save();
        console.log("‚úÖ Ward ƒë√£ ƒë∆∞·ª£c t·∫°o:", ward.fullName);

        // Test 3: T·∫°o Clinic v·ªõi ƒë·ªãa ch·ªâ m·ªõi
        console.log("\n3Ô∏è‚É£ Test t·∫°o Clinic v·ªõi ƒë·ªãa ch·ªâ m·ªõi...");
        const clinic = new Clinic({
            name: "Ph√≤ng kh√°m Test",
            phone: "0123456789",
            email: "test@clinic.com",
            tax_code: "123456789",
            registration_number: "REG001",
            opening_hours: "08:00",
            closing_hours: "17:00",
            created_by: "507f1f77bcf86cd799439011", // ObjectId gi·∫£
            address: {
                province: {
                    code: "01",
                    name: "Th√†nh ph·ªë H√† N·ªôi"
                },
                ward: {
                    code: "00004",
                    name: "Ph∆∞·ªùng Ba ƒê√¨nh"
                },
                houseNumber: "123",
                street: "ƒê∆∞·ªùng ABC",
                coordinates: {
                    type: "Point",
                    coordinates: [105.8342, 21.0278] // [longitude, latitude]
                }
            }
        });

        await clinic.save();
        console.log("‚úÖ Clinic ƒë√£ ƒë∆∞·ª£c t·∫°o:", clinic.name);
        console.log("üìç ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:", clinic.address.fullAddress);

        // Test 4: T√¨m ki·∫øm clinic theo ƒë·ªãa ch·ªâ
        console.log("\n4Ô∏è‚É£ Test t√¨m ki·∫øm clinic theo ƒë·ªãa ch·ªâ...");
        const clinicsInHanoi = await Clinic.find({
            "address.province.code": "01"
        });
        console.log(`‚úÖ T√¨m th·∫•y ${clinicsInHanoi.length} clinic ·ªü H√† N·ªôi`);

        // Test 5: T√¨m ki·∫øm clinic g·∫ßn v·ªã tr√≠
        console.log("\n5Ô∏è‚É£ Test t√¨m ki·∫øm clinic g·∫ßn v·ªã tr√≠...");
        const nearbyClinics = await Clinic.find({
            "address.coordinates.coordinates": {
                $near: {
                    $geometry: {
                        type: "Point",
                        coordinates: [105.8342, 21.0278]
                    },
                    $maxDistance: 1000 // 1km
                }
            }
        });
        console.log(`‚úÖ T√¨m th·∫•y ${nearbyClinics.length} clinic trong b√°n k√≠nh 1km`);

        console.log("\nüéâ T·∫•t c·∫£ test ƒë·ªÅu th√†nh c√¥ng!");

        // Cleanup - x√≥a d·ªØ li·ªáu test
        await Province.deleteOne({ code: "01" });
        await Ward.deleteOne({ code: "00004" });
        await Clinic.deleteOne({ name: "Ph√≤ng kh√°m Test" });
        console.log("üßπ ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu test");

    } catch (error) {
        console.error("‚ùå L·ªói trong qu√° tr√¨nh test:", error);
        throw error;
    }
};

/**
 * Test import d·ªØ li·ªáu t·ª´ JSON
 */
const testImportData = async () => {
    try {
        console.log("üß™ Test import d·ªØ li·ªáu t·ª´ JSON...");

        // D·ªØ li·ªáu m·∫´u t·ª´ ·∫£nh
        const sampleData = [
            {
                "Code": "01",
                "FullName": "Th√†nh ph·ªë H√† N·ªôi",
                "Wards": [
                    {
                        "Code": "00004",
                        "FullName": "Ph∆∞·ªùng Ba ƒê√¨nh",
                        "ProvinceCode": "01"
                    },
                    {
                        "Code": "00008",
                        "FullName": "Ph∆∞·ªùng Ng·ªçc H√†",
                        "ProvinceCode": "01"
                    }
                ]
            }
        ];

        const { importAddressData } = require("./importAddressData");
        await importAddressData(sampleData);

        console.log("‚úÖ Import d·ªØ li·ªáu th√†nh c√¥ng!");

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë√£ import
        const provinces = await Province.find();
        const wards = await Ward.find();

        console.log(`üìä ƒê√£ import: ${provinces.length} t·ªânh, ${wards.length} ph∆∞·ªùng/x√£`);

        // Cleanup
        await Province.deleteMany({});
        await Ward.deleteMany({});
        console.log("üßπ ƒê√£ d·ªçn d·∫πp d·ªØ li·ªáu test");

    } catch (error) {
        console.error("‚ùå L·ªói test import:", error);
        throw error;
    }
};

module.exports = {
    testAddressModels,
    testImportData
};


